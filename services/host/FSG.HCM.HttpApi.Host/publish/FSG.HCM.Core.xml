<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FSG.HCM.Core</name>
    </assembly>
    <members>
        <member name="M:FSG.HCM.Core.BaseService`3.SendEmailAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            发送邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.BaseService`3.GetFileFormTmeplate(System.String,System.String,System.Data.DataSet,System.String,System.String)">
            <summary>
            根据模板生成文件
            </summary>
            <param name="fileName"></param>
            <param name="tempPath"></param>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.BaseService`3.AsposeExceptionScprits.ChangeErrorMessage(System.String)">
            <summary>
            转换Aspose的异常信息
            </summary>
            <param name="sourceErrorMessage">原始错误信息</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.BaseService`3.ReadExcelToDataSet(System.String)">
            <summary>  
            读取Excel数据到DataSet  
            </summary>  
            <param name="filePath">The file path.</param>  
            <returns></returns>  
        </member>
        <member name="M:FSG.HCM.Core.BaseService`3.AddWaterMark(Aspose.Words.Document,System.String)">
            <summary>
            Word文档插入多个水印
            </summary>
            <param name="mdoc">Document</param>
            <param name="wmText">水印文字名</param>
        </member>
        <member name="M:FSG.HCM.Core.BaseService`3.ShapeMore(Aspose.Words.Document,System.String,System.Double,System.Double)">
            <summary>
            插入多个水印
            </summary>
            <param name="mdoc">Document</param>
            <param name="wmText">水印文字名</param>
            <param name="left">左边距多少</param>
            <param name="top">上边距多少</param>
            <returns></returns>
        </member>
        <member name="T:FSG.HCM.Core.Guard">
            <summary>
            参数合法性检查类
            </summary>
        </member>
        <member name="M:FSG.HCM.Core.Guard.NotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，
            </summary>
            <param name="value"></param>
            <param name="valueName">参数名称</param>
        </member>
        <member name="M:FSG.HCM.Core.Guard.NotNullOrEmpty(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            检查字符串不能为空引用或空字符串，
            </summary>
            <param name="value"></param>
            <param name="valueName">参数名称。</param>
            <param name="maxLength">字符串允许的最大长度。</param>
            <param name="minLength">字符串允许的最小长度。0表示不限制最小长度</param>
        </member>
        <member name="M:FSG.HCM.Core.Guard.NotNullOrWhiteSpace(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            检查字符串不能为空引用或全部为空白，
            </summary>
            <param name="value">需检查的字符串</param>
            <param name="valueName">参数名称。</param>
            <param name="maxLength">字符串允许的最大长度。</param>
            <param name="minLength">字符串允许的最小长度。0表示不限制最小长度</param>
        </member>
        <member name="M:FSG.HCM.Core.Guard.Length(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            检查字符串长度是否超过最大长度，或低于最小长度，
            </summary>
            <param name="value">需检查的字符串。</param>
            <param name="valueName">参数名称。</param>
            <param name="maxLength">字符串允许的最大长度。</param>
            <param name="minLength">字符串要求的最小长度。0表示不限制最小长度</param>
        </member>
        <member name="M:FSG.HCM.Core.Guard.NotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty
            </summary>
            <param name="value"></param>
            <param name="valueName">参数名称。</param>
        </member>
        <member name="M:FSG.HCM.Core.Guard.NotNullOrEmpty``1(System.Collections.Generic.IReadOnlyList{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，
            </summary>
            <typeparam name="T">集合项的类型。</typeparam>
            <param name="list"></param>
            <param name="valueName">参数名称。</param>
        </member>
        <member name="M:FSG.HCM.Core.Guard.LessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于，参数<paramref name="canEqual"/>]指定值，
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="valueName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
        </member>
        <member name="M:FSG.HCM.Core.Guard.GreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于，参数<paramref name="canEqual"/>]指定值，
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value">需检查的参数。</param>
            <param name="valueName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
        </member>
        <member name="M:FSG.HCM.Core.Guard.Between``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value">需检查的参数。</param>
            <param name="valueName">参数名称。</param>
            <param name="start">比较范围的起始值。</param>
            <param name="end">比较范围的结束值。</param>
            <param name="startEqual">是否可等于起始值</param>
            <param name="endEqual">是否可等于结束值</param>
        </member>
        <member name="M:FSG.HCM.Core.Guard.DirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，
            </summary>
            <param name="directory">需检查的路径。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:FSG.HCM.Core.Guard.FileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出
            </summary>
            <param name="filename"></param>
            <param name="valueName">参数名称。</param>
        </member>
        <member name="M:FSG.HCM.Core.HandleMergeFieldInsertHtml.Aspose#Words#MailMerging#IFieldMergingCallback#FieldMerging(Aspose.Words.MailMerging.FieldMergingArgs)">
            <summary>
            Called when a mail merge merges data into a MERGEFIELD.
            </summary>
        </member>
        <member name="T:FSG.HCM.Core.HCMSettingConsts.ControlType">
            <summary>
            前端控件类型
            </summary>
        </member>
        <member name="M:FSG.HCM.Core.IBaseRecurringJob.ExecuteAsync">
            <summary>
            执行任务
            </summary>
            <returns></returns>
        </member>
        <member name="F:FSG.HCM.Core.DataBaseType.SqlServer">
            <summary>
            Sql Server
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.DataBaseType.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.GetConnection">
            <summary>
            获取数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.Execute(System.String,System.Object[])">
            命令字符串
            要应用于命令字符串的参数
            执行命令后由数据库返回的结果
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.Execute(System.String)">
            命令字符串
            要应用于命令字符串的参数
            执行命令后由数据库返回的结果
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.Execute(System.String,System.Int32)">
            命令字符串
            要应用于命令字符串的参数
            执行命令后由数据库返回的结果
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteTable(System.String,System.Object[])">
            <summary>
            根据传入的sql语句获取返回的数据表
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            根据传入的sql语句获取返回的数据集
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteSql(System.String)">
            <summary>
            流动人口统计
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteNonQueryByCommand(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程,并返回执行行数,无数据结果返回.
            </summary>
            <param name="cmdText">SQL语句(存储过程名称)</param>
            <param name="cmdParms">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteProcedureNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程,并返回执行行数,无数据结果返回.
            </summary>
            <param name="cmdText">SQL语句(存储过程名称)</param>
            <param name="cmdParms">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteTable(System.String,System.Object)">
            <summary>
            根据传入的sql语句获取返回的数据表
            </summary>
            <param name="sql"></param>
            <param name="param">对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteDataSet(System.String,System.Object)">
            <summary>
            根据传入的sql语句获取返回的数据集
            </summary>
            <param name="sql"></param>
            <param name="param">对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteNonQuery(System.String,System.Object)">
            <summary>
            命令字符串
            要应用于命令字符串的参数
            执行命令后由数据库返回的结果
            </summary>
            <param name="sql"></param>
            <param name="param">对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteSqlTextNonQuery(System.String,System.Object)">
            <summary>
            命令字符串
            要应用于命令字符串的参数
            执行命令后由数据库返回的结果
            </summary>
            <param name="sql"></param>
            <param name="param">对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteProcedure(System.String,System.Object)">
            <summary>
            执行存储过程
            </summary>
            <param name="storeProcedureText"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteProcedureSetAsync(System.String,System.Object)">
            <summary>
            执行存储过程（DataSet）
            </summary>
            <param name="storeProcedureText">存储过程</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteProcedureAsync(System.String,System.Object)">
            <summary>
            执行存储过程（DataTable）
            </summary>
            <param name="storeProcedureText">存储过程名称</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteProcedureDataSet(System.String,System.Object)">
            <summary>
            执行存储过程
            </summary>
            <param name="storeProcedureText"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteProcedureNonQuery(System.String,System.Object)">
            <summary>
            执行存储过程(无查询结果)
            </summary>
            <param name="storeProcedureText"></param>
            <param name="param">对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ShowDebugerSqlParameterDefine(System.Data.SqlClient.SqlParameter[])">
            <summary>
            显示SQL参数设置(仅附在进程调试才会显示)
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ShowDebugerMySqlParameterDefine(MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            显示SQL参数设置(仅附在进程调试才会显示)
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ConvertObjectToSqlParameters(System.String@,System.Object)">
            <summary>
            转换对象为SQL参数数组
            </summary>
            <param name="sql"></param>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ConvertObjectToMySqlParameters(System.String@,System.Object)">
            <summary>
            转换对象为SQL参数数组
            </summary>
            <param name="sql"></param>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ConvertObjectToSqlParameters(System.Object)">
            <summary>
            转换对象为SQL参数数组(只转换对象属性为SQL参数,不参与SQL语句的动态变更)
            </summary>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ConvertObjectToMySqlParameters(System.Object)">
            <summary>
            转换对象为SQL参数数组(只转换对象属性为SQL参数,不参与SQL语句的动态变更)
            </summary>
            <param name="param">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.GetTableObjectName``1(``0)">
            <summary>
            获取对象类型中的表名定义扩展属性
            </summary>
            <typeparam name="T">表对象类型</typeparam>
            <param name="t">表对象实例</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.IsSearchParameter(System.Object)">
            <summary>
            检查是否是条件拼接字
            </summary>
            <param name="value">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.IsSortParameter(System.Object)">
            <summary>
            检查是否存在排序关键字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ConvertSortParameter(System.Object)">
            <summary>
            生成排序字符串列表
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ConvertSearchParameter(System.Object)">
            <summary>
            转换Search参数为查询参数数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ConvertMySqlSearchParameter(System.Object)">
            <summary>
            转换Search参数为查询参数数据
            </summary>
            <param name="property"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ConvertSQLText2SQLParameters(System.String)">
            <summary>
            分析并转换Where语句
            </summary>
            <param name="sqlBlock">Where条件块SQL</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ConvertSQLText2MySQLParameters(System.String)">
            <summary>
            分析并转换Where语句
            </summary>
            <param name="sqlBlock">Where条件块SQL</param>
            <returns></returns>
        </member>
        <member name="T:FSG.HCM.Core.SqlExecuter`1.WhereSqlParameterInfo">
            <summary>
            用于转换Search拼接SQL的转换类
            </summary>
        </member>
        <member name="P:FSG.HCM.Core.SqlExecuter`1.WhereSqlParameterInfo.SqlBlockText">
            <summary>
            SQL块文本
            </summary>
        </member>
        <member name="P:FSG.HCM.Core.SqlExecuter`1.WhereSqlParameterInfo.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:FSG.HCM.Core.SqlExecuter`1.WhereSqlParameterInfo.Relationship">
            <summary>
            关联链接字
            </summary>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.WhereSqlParameterInfo.CreateSQL">
            <summary>
            生成SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="T:FSG.HCM.Core.SqlExecuter`1.WhereMySqlParameterInfo">
            <summary>
            用于转换Search拼接SQL的转换类
            </summary>
        </member>
        <member name="P:FSG.HCM.Core.SqlExecuter`1.WhereMySqlParameterInfo.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:FSG.HCM.Core.SqlExecuter`1.SortSqlParameterInfo">
            <summary>
            用于转换Order拼接SQL的转换类
            </summary>
        </member>
        <member name="T:FSG.HCM.Core.SqlExecuter`1.SortSqlParameterInfo.SortType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.SqlExecuter`1.SortSqlParameterInfo.SortType.ASC">
            <summary>
            正序
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.SqlExecuter`1.SortSqlParameterInfo.SortType.DESC">
            <summary>
            倒序
            </summary>
        </member>
        <member name="P:FSG.HCM.Core.SqlExecuter`1.SortSqlParameterInfo.SortDirection">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="P:FSG.HCM.Core.SqlExecuter`1.SortSqlParameterInfo.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.SortSqlParameterInfo.CreateSQL">
            <summary>
            生成SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteDataTableAsync(System.String,System.Object)">
            <summary>
            异步获取数据表
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteNonQueryAsync(System.String,System.Object)">
            <summary>
            异步提交变更(事务完成后的Commit提交)
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数对象</param>
            <remarks>情勿在本操作语句后面增加新的同表操作,可能会导致异常或者脏数据</remarks>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteDataSetAsync(System.Collections.Generic.List{System.String},System.Object)">
            <summary>
            异步获取数据集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.GetDataBaseName">
            <summary>
            获取数据库名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.CreateTableSchema(System.Data.Common.DbDataReader)">
            <summary>
            通过SqlDataReader建立DataTable
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteDataTableAsync(System.Data.Common.DbCommand)">
            <summary>
            异步获取数据集（DataTable）
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.SqlExecuter`1.ExecuteDataTableAsync(System.String,System.Object[])">
            <summary>
            根据传入的sql语句获取返回的数据集
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXJavascript">
            <summary>Used to denote the encoding necessary for files containing JavaScript source code. The alternative MIME type for this file type is text/javascript.</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioL24">
            <summary>24bit Linear PCM audio at 8-48kHz, 1-N channels; Defined in RFC 3190</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXShockwaveFlash">
            <summary>Adobe Flash files for example with the extension .swf</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationOctetStream">
            <summary>Arbitrary binary data.[5] Generally speaking this type identifies files that are not associated with a specific application. Contrary to past assumptions by software packages such as Apache this is not a type that should be applied to unknown files. In such a case, a server or application should not indicate a content type, as it may be incorrect, but rather, should omit the type in order to allow the recipient to guess the type.[6]</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationAtomXml">
            <summary>Atom feeds</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.TextCss">
            <summary>Cascading Style Sheets; Defined in RFC 2318</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.TextCmd">
            <summary>commands; subtype resident in Gecko browsers like Firefox 3.5</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.TextCsv">
            <summary>Comma-separated values; Defined in RFC 4180</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXDeb">
            <summary>deb (file format), a software package format used by the Debian project</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.MultipartEncrypted">
            <summary>Defined in RFC 1847</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.MultipartSigned">
            <summary>Defined in RFC 1847</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.MessageHttp">
            <summary>Defined in RFC 2616</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ModelExample">
            <summary>Defined in RFC 4735</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXDvi">
            <summary>device-independent document in DVI format</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXmlDtd">
            <summary>DTD files; Defined by RFC 3023</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:FSG.HCM.Core.MimeTypeNames.ApplicationJavascript" -->
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationEcmascript">
            <summary>ECMAScript/JavaScript; Defined in RFC 4329 (equivalent to application/javascript but with stricter processing rules)</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationEdifact">
            <summary>EDI EDIFACT data; Defined in RFC 1767</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationEdiX12">
            <summary>EDI X12 data; Defined in RFC 1767</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.MessagePartial">
            <summary>Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.MessageRfc822">
            <summary>Email; EML files, MIME files, MHT files, MHTML files; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.TextXml">
            <summary>Extensible Markup Language; Defined in RFC 3023</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.VideoXFlv">
            <summary>Flash video (FLV files)</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ImageGif">
            <summary>GIF image; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.TextXGwtRpc">
            <summary>GoogleWebToolkit data</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXGzip">
            <summary>Gzip</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.TextHtml">
            <summary>HTML; Defined in RFC 2854</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ImageVndMicrosoftIcon">
            <summary>ICO image; Registered[9]</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ModelIges">
            <summary>IGS files, IGES files; Defined in RFC 2077</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.MessageImdnXml">
            <summary>IMDN Instant Message Disposition Notification; Defined in RFC 5438</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationJson">
            <summary>JavaScript Object Notation JSON; Defined in RFC 4627</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationJsonPatch">
            <summary>JavaScript Object Notation (JSON) Patch; Defined in RFC 6902</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:FSG.HCM.Core.MimeTypeNames.TextJavascript" -->
        <member name="F:FSG.HCM.Core.MimeTypeNames.ImagePjpeg">
            <summary>JPEG JFIF image; Associated with Internet Explorer; Listed in ms775147(v=vs.85) - Progressive JPEG, initiated before global browser support for progressive JPEGs (Microsoft and Firefox).</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ImageJpeg">
            <summary>JPEG JFIF image; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.TextXJqueryTmpl">
            <summary>jQuery template data</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndGoogleEarthKmlXml">
            <summary>KML files (e.g. for Google Earth)</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXLatex">
            <summary>LaTeX files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.VideoXMatroska">
            <summary>Matroska open media format</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet">
            <summary>Microsoft Excel 2007 files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndMsExcel">
            <summary>Microsoft Excel files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation">
            <summary>Microsoft Powerpoint 2007 files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndMsPowerpoint">
            <summary>Microsoft Powerpoint files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument">
            <summary>Microsoft Word 2007 files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationMsword">
            <summary>Microsoft Word files[15]</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.MultipartAlternative">
            <summary>MIME Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.MultipartMixed">
            <summary>MIME Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.MultipartRelated">
            <summary>MIME Email; Defined in RFC 2387 and used by MHTML (HTML mail)</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.MultipartFormData">
            <summary>MIME Webform; Defined in RFC 2388</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndMozillaXulXml">
            <summary>Mozilla XUL files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioMpeg">
            <summary>MP3 or other MPEG audio; Defined in RFC 3003</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioMp4">
            <summary>MP4 audio</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.VideoMp4">
            <summary>MP4 video; Defined in RFC 4337</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.VideoMpeg">
            <summary>MPEG-1 video with multiplexed audio; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ModelMesh">
            <summary>MSH files, MESH files; Defined in RFC 2077, SILO files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioBasic">
            <summary>mulaw audio at 8 kHz, 1 channel; Defined in RFC 2046</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.VideoOgg">
            <summary>Ogg Theora or other video (with audio); Defined in RFC 5334</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioOgg">
            <summary>Ogg Vorbis, Speex, Flac and other audio; Defined in RFC 5334</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationOgg">
            <summary>Ogg, a multimedia bitstream container format; Defined in RFC 5334</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXopXml">
            <summary>OP</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndOasisOpendocumentGraphics">
            <summary>OpenDocument Graphics; Registered[14]</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndOasisOpendocumentPresentation">
            <summary>OpenDocument Presentation; Registered[13]</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndOasisOpendocumentSpreadsheet">
            <summary>OpenDocument Spreadsheet; Registered[12]</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationVndOasisOpendocumentText">
            <summary>OpenDocument Text; Registered[11]</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXPkcs12">
            <summary>p12 files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXPkcs7Certificates">
            <summary>p7b and spc files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXPkcs7Mime">
            <summary>p7c files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXPkcs7Certreqresp">
            <summary>p7r files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXPkcs7Signature">
            <summary>p7s files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationPdf">
            <summary>Portable Document Format, PDF has been in use for document exchange on the Internet since 1993; Defined in RFC 3778</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ImagePng">
            <summary>Portable Network Graphics; Registered,[8] Defined in RFC 2083</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationPostscript">
            <summary>PostScript; Defined in RFC 2046</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.VideoQuicktime">
            <summary>QuickTime video; Registered[10]</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXRarCompressed">
            <summary>RAR archive files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioVndRnRealaudio">
            <summary>RealAudio; Documented in RealPlayer Customer Support Answer 2559</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationRdfXml">
            <summary>Resource Description Framework; Defined by RFC 3870</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationRssXml">
            <summary>RSS feeds</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationSoapXml">
            <summary>SOAP; Defined by RFC 3902</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXStuffit">
            <summary>StuffIt archive files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ImageSvgXml">
            <summary>SVG vector image; Defined in SVG Tiny 1.2 Specification Appendix M</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ImageTiff">
            <summary>Tag Image File Format (only for Baseline TIFF); Defined in RFC 3302</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXTar">
            <summary>Tarball files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.TextPlain">
            <summary>Textual data; Defined in RFC 2046 and RFC 3676</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXFontTtf">
            <summary>TrueType Font No registered MIME type, but this is the most commonly used</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.TextVcard">
            <summary>vCard (contact information); Defined in RFC 6350</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioVorbis">
            <summary>Vorbis encoded audio; Defined in RFC 5215</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioVndWave">
            <summary>WAV audio; Defined in RFC 2361</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationFontWoff">
            <summary>Web Open Font Format; (candidate recommendation; use application/x-font-woff until standard is official)</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.VideoWebm">
            <summary>WebM Matroska-based open media format</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioWebm">
            <summary>WebM open media format</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioXMsWax">
            <summary>Windows Media Audio Redirector; Documented in Microsoft help page</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.AudioXMsWma">
            <summary>Windows Media Audio; Documented in Microsoft KB 288102</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.VideoXMsWmv">
            <summary>Windows Media Video; Documented in Microsoft KB 288102</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ModelVrml">
            <summary>WRL files, VRML files; Defined in RFC 2077</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ModelX3DXml">
            <summary>X3D ISO standard for representing 3D computer graphics, X3D XML files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ModelX3DBinary">
            <summary>X3D ISO standard for representing 3D computer graphics, X3DB binary files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ModelX3DVrml">
            <summary>X3D ISO standard for representing 3D computer graphics, X3DV VRML files</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationXhtmlXml">
            <summary>XHTML; Defined by RFC 3236</summary>
        </member>
        <member name="F:FSG.HCM.Core.MimeTypeNames.ApplicationZip">
            <summary>ZIP archive files; Registered[7]</summary>
        </member>
        <member name="T:FSG.HCM.Core.PagingBase">
            <summary>
            分页查询时使用的Dto类型
            </summary>
        </member>
        <member name="P:FSG.HCM.Core.PagingBase.PageIndex">
            <summary>
            当前页面.默认从1开始
            </summary>
        </member>
        <member name="P:FSG.HCM.Core.PagingBase.PageSize">
            <summary>
            每页多少条.每页显示多少记录
            </summary>
        </member>
        <member name="P:FSG.HCM.Core.PagingBase.SkipCount">
            <summary>
            跳过多少条
            </summary>
        </member>
        <member name="T:FSG.HCM.Core.FleeExpression">
            <summary>
            表达式计算引擎
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.FleeExpression.GLOBAL_VARIABLE_FORMAT">
            <summary>
            全局静态参数
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.FleeExpression.GLOBAL_DYNAMIC_METHOD_FORMAT">
            <summary>
            全局动态方法
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.FleeExpression._context">
            <summary>
            表达式上下文
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.FleeExpression._vars">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.FleeExpression._method">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.FleeExpression._initGenericFormulae">
            <summary>
            内置方程式列表
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.FleeExpression.OperatorVariableType.None">
            <summary>
            默认不处理
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.FleeExpression.OperatorVariableType.Clear">
            <summary>
            清理项目
            </summary>
        </member>
        <member name="F:FSG.HCM.Core.FleeExpression.OperatorVariableType.SetDefault">
            <summary>
            强制设置为数据类型默认值
            </summary>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            构造函数
            </summary>
            <param name="globalVars">全局变量字典</param>
            <param name="globalFuncs">全局方法字典</param>
            <param name="methodTypes">函数字典</param>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.AddGlobalVariables(System.Collections.Generic.Dictionary{System.String,System.Object},FSG.HCM.Core.FleeExpression.OperatorVariableType)">
            <summary>
            新增全局共享变量(租户内共享数据)
            </summary>
            <param name="vars">全局变量字典</param>
            <param name="isForceRefresh">操作模式</param>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.AddGlobalMethods(System.Collections.Generic.Dictionary{System.String,System.Object},FSG.HCM.Core.FleeExpression.OperatorVariableType)">
            <summary>
            新增全局共享方法变量(租户内共享数据)
            </summary>
            <param name="methods">全局变量字典</param>
            <param name="isForceRefresh">操作模式</param>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.GetGlobalVariables">
            <summary>
            获取全局变量列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.GetUserVariables">
            <summary>
            获取全局变量列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.AddVariables(System.Collections.Generic.Dictionary{System.String,System.Object},FSG.HCM.Core.FleeExpression.OperatorVariableType)">
            <summary>
            添加个人变量
            </summary>
            <param name="vars">变量字典</param>
            <param name="operatorType">操作类型</param>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.AddStaticMethods(System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            添加函数
            </summary>
            <param name="methodTypes">函数类字典</param>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.AddVariable(System.String,System.Object)">
            <summary>
            新增内置变量
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.CalculateSingle(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            计算方程式(指定方程式)
            </summary>
            <typeparam name="T">泛型变量</typeparam>
            <param name="vars">变量集合</param>
            <param name="formulaCode">指定方程式编号</param>
            <param name="formulaText">指定方程式</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.CalculateSingle``1(System.String)">
            <summary>
            计算方程式(指定方程式)
            </summary>
            <typeparam name="T">泛型变量</typeparam>
            <param name="formulaText">指定方程式</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.Calculate``1(System.String,System.String)">
            <summary>
            计算方程式(自动将计算结果作为变量添加到内置变量中)
            </summary>
            <typeparam name="T">泛型变量</typeparam>
            <param name="formulaText">指定方程式</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.Calculate(System.String,System.String)">
            <summary>
            计算方程式(自动将计算结果作为变量添加到内置变量中)
            </summary>
            <typeparam name="T">泛型变量</typeparam>
            <param name="formulaText">指定方程式</param>
            <returns></returns>
        </member>
        <member name="M:FSG.HCM.Core.FleeExpression.Dispose">
            <summary>
            析构方法
            </summary>
        </member>
        <member name="T:System.BooleanExtensions">
            <summary>
            布尔值<see cref="T:System.Boolean"/>类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:System.BooleanExtensions.ToLower(System.Boolean)">
            <summary>
            把布尔值转换为小写字符串
            </summary>
        </member>
        <member name="M:System.BooleanExtensions.TrueThrow(System.Boolean,System.Exception)">
            <summary>
            如果条件成立，则抛出异常
            </summary>
        </member>
        <member name="T:System.Collections.Generic.CollectionExtensions">
            <summary>
            集合扩展方法
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)">
            <summary>
            如果条件成立，添加项
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})">
            <summary>
            如果条件成立，添加项
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
            如果不存在，添加项
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            如果不为空，添加项
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            获取对象，不存在对使用委托添加对象
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.IsContinuous(System.Collections.Generic.List{System.Int32})">
            <summary>
            判断数字集合是否是连续的
            </summary>
            <returns>如果参数集合为null或空集合，则返回false</returns>
        </member>
        <member name="T:System.DateTimeExtensions">
            <summary>
            时间扩展操作类
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            当前时间是否周末
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
            当前时间是否工作日
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToYyyyMmDd(System.DateTime)">
            <summary>
            将时间类型转成int类型. 例如 2021-09-01 => 20210901
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToYyyyMm(System.DateTime)">
            <summary>
            将时间类型转成int类型. 例如 2021-09-01 => 202109
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToCurrentDateMaxDateTime(System.Nullable{System.DateTime})">
            <summary>
            获取指定日期 当天的最大时间
            例如 2021-09-10 11:22:33.123 转换后 2021-09-10 23:59:59.999
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToCurrentDateMaxDateTime(System.DateTime)">
            <summary>
            获取指定日期 当天的最大时间
            例如 2021-09-10 11:22:33.123 转换后 2021-09-10 23:59:59.999
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToCurrentDateMinDateTime(System.Nullable{System.DateTime})">
            <summary>
            获取指定日期 当天的最小时间
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToCurrentDateMinDateTime(System.DateTime)">
            <summary>
            获取指定日期 当天的最小时间
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToNextSecondDateTime(System.Nullable{System.DateTime})">
            <summary>
            获取指定时间的下一秒
            例如 2021-09-10 11:11:11.1234567 转换后 2021-09-10 11:11:12.0000000
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToUnixTimeSeconds(System.DateTime)">
             <summary>
             转为秒级时间戳
             <param name="dateTime">时间</param>
             <remarks>
            时间戳实际就是当前时间距离1970年1月1日0点0时0分0秒（转换成北京时间是1970年1月1日8点0时0分0秒）距离你要计算的时间的秒数或者毫秒数 一般来说：我们用的时间戳到秒的话是10位，到毫秒的话是13位
             </remarks>
             </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToUnixTimeSeconds(System.Nullable{System.DateTime})">
            <summary>
            转为秒级时间戳
            <param name="dateTime">时间</param>
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToUnixTimeMilliseconds(System.DateTime)">
            <summary>
            转为毫秒级时间戳
            <param name="dateTime">时间</param>
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToUnixTimeMilliseconds(System.Nullable{System.DateTime})">
            <summary>
            转为毫秒级时间戳
            <param name="dateTime">时间</param>
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToDateTimeBySecondTimeStamp(System.Int64,System.TimeZoneInfo)">
            <summary>
            秒级时间戳转为时间
            <param name="timestamp">时间</param>
            <param name="timeZoneInfo">默认 TimeZoneInfo.Utc</param>
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToDateTimeBySecondTimeStamp(System.Nullable{System.Int64},System.TimeZoneInfo)">
            <summary>
            秒级时间戳转为时间
            <param name="timestamp">时间戳</param>
            <param name="timeZoneInfo">默认 TimeZoneInfo.Utc</param>
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToDateTimeByMilliSecondTimeStamp(System.Int64,System.TimeZoneInfo)">
            <summary>
            毫秒级时间戳转为时间
            <param name="timestamp">时间戳</param>
            <param name="timeZoneInfo">默认 TimeZoneInfo.Utc</param>
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToDateTimeByMilliSecondTimeStamp(System.Nullable{System.Int64},System.TimeZoneInfo)">
            <summary>
            毫秒级时间戳转为时间
            <param name="timestamp">时间戳</param>
            <param name="timeZoneInfo">默认 TimeZoneInfo.Utc</param>
            </summary>
        </member>
        <member name="T:System.DecimalExtensions">
            <summary>
            Decimal扩展操作类
            </summary>
        </member>
        <member name="M:System.DecimalExtensions.TrimEndZero(System.Decimal)">
            <summary>
            移除小数点后面的零
            </summary>
        </member>
        <member name="M:System.DecimalExtensions.TrimEndZero(System.Nullable{System.Decimal})">
            <summary>
            移除小数点后面的零
            </summary>
        </member>
        <member name="T:System.EnumExtensions">
            <summary>
            枚举<see cref="T:System.Enum"/>的扩展辅助操作方法
            </summary>
        </member>
        <member name="M:System.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            获取枚举项上的<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性的文字描述
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.EnumExtensions.Each(System.Type,System.Action{System.String,System.String,System.String,System.Object})">
            <summary>
            枚举遍历，返回枚举的名称、值、特性
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="action">回调函数</param>
        </member>
        <member name="M:System.EnumExtensions.ToEnumDescriptionString(System.Int16,System.Type)">
            <summary>
            根据枚举类型值返回枚举定义Description属性
            </summary>
            <param name="value"></param>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:System.EnumExtensions.GetEnumTypeValueList``1">
            <summary>
            将指定枚举转换为字典.
            枚举的Description为字典的Key,枚举的Value为字典的Value
            </summary>
            <typeparam name="T">指定枚举</typeparam>
        </member>
        <member name="M:System.EnumExtensions.GetEnumTypeList``1">
            <summary>
            将指定枚举转换为字典.
            枚举的Description为字典的Key,枚举为字典的Value
            </summary>
            <typeparam name="T">指定枚举</typeparam>
        </member>
        <member name="M:System.EnumExtensions.GetEnumTypeDescriptionNameList``1">
            <summary>
            将指定枚举转换为字典.
            枚举的Description为字典的Key,枚举的Name为字典的Value
            </summary>
            <typeparam name="T">指定枚举</typeparam>
        </member>
        <member name="M:System.EnumExtensions.GetEnumTypeValueNameList``1">
            <summary>
            将指定枚举转换为字典.
            枚举的Name为字典的Key,枚举的Description为字典的Value
            </summary>
            <typeparam name="T">指定枚举</typeparam>
        </member>
        <member name="M:System.EnumExtensions.GetStringKeyValueList``1">
            <summary>
            将指定枚举转换为字典.
            枚举的Name为字典的Key,枚举的Description为字典的Value
            </summary>
            <typeparam name="TModel">指定枚举</typeparam>
        </member>
        <member name="M:System.EnumExtensions.GetEnumKeyValueList``1">
            <summary>
            将指定枚举转换为字典.
            枚举的Description为字典的Key,枚举为字典的Value
            </summary>
            <typeparam name="TModel">指定枚举</typeparam>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            异常操作扩展
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.FormatMessage(System.Exception,System.Boolean)">
            <summary>
            格式化异常消息
            </summary>
            <param name="e">异常对象</param>
            <param name="isHideStackTrace">是否隐藏异常规模信息</param>
            <returns>格式化后的异常信息字符串</returns>
        </member>
        <member name="M:System.ExceptionExtensions.ThrowIf(System.Exception,System.Boolean)">
            <summary>
            如果条件成立，则抛出异常
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.ThrowIf(System.Exception,System.Func{System.Boolean})">
            <summary>
            如果条件成立，则抛出异常
            </summary>
        </member>
        <member name="T:System.Int32Extensions">
            <summary>
            int 扩展方法
            </summary>
        </member>
        <member name="M:System.Int32Extensions.YyyyMmDdToTime(System.Int32)">
            <summary>
            将 <see cref="M:System.DateTimeExtensions.ToYyyyMmDd(System.DateTime)"/> 反转换.
            例如 20210826 => 2021-08-26
            </summary>
        </member>
        <member name="T:System.LongExtensions">
            <summary>
            long<see cref="T:System.Int64"/>的扩展辅助操作方法
            </summary>
        </member>
        <member name="M:System.LongExtensions.ToLocalTimeDateBySeconds(System.Int64)">
            <summary>
             时间戳转本地时间-时间戳精确到秒
            </summary> 
        </member>
        <member name="M:System.LongExtensions.ToLocalTimeDateByMilliseconds(System.Int64)">
            <summary>
             时间戳转本地时间-时间戳精确到毫秒
            </summary> 
        </member>
        <member name="T:System.Reflection.MemberInfoExtensions">
            <summary>
            成员<see cref="T:System.Reflection.MemberInfo"/>的扩展辅助操作方法
            </summary>
        </member>
        <member name="M:System.Reflection.MemberInfoExtensions.GetDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员元数据的Description特性描述信息。
            </summary>
            <param name="member">成员元数据对象。</param>
            <param name="inherit">是否搜索成员的继承链以查找描述特性。</param>
            <returns>返回Description特性描述信息，如不存在则返回成员的名称。</returns>
        </member>
        <member name="M:System.Reflection.MemberInfoExtensions.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            检查指定指定类型成员中是否存在指定的Attribute特性。
            </summary>
            <typeparam name="T">要检查的Attribute特性类型。</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:System.Reflection.MemberInfoExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:System.Reflection.MemberInfoExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性。
            </summary>
            <typeparam name="T">Attribute特性类型。</typeparam>
            <param name="memberInfo">类型类型成员。</param>
            <param name="inherit">是否从继承中查找。</param>
            <returns>返回所有指定Attribute特性的数组。</returns>
        </member>
        <member name="T:System.Reflection.MethodInfoExtensions">
            <summary>
            方法<see cref="T:System.Reflection.MethodInfo"/>的扩展辅助操作方法
            </summary>
        </member>
        <member name="M:System.Reflection.MethodInfoExtensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            方法是否是异步
            </summary>
        </member>
        <member name="M:System.Reflection.MethodInfoExtensions.IsOverridden(System.Reflection.MethodInfo)">
            <summary>
            返回当前方法信息是否是重写方法
            </summary>
            <param name="method">要判断的方法信息</param>
            <returns>是否是重写方法</returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            字符串<see cref="T:System.String"/>类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsMatch(System.String,System.String,System.Boolean)">
            <summary>
            指示所指定的正则表达式在指定的输入字符串中是否找到了匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="isContains">是否包含，否则全匹配</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:System.StringExtensions.Match(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的第一个匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>一个对象，包含有关匹配项的信息</returns>
        </member>
        <member name="M:System.StringExtensions.ReplaceRegex(System.String,System.String,System.String)">
            <summary>
            在指定的输入字符串中匹配并替换符合指定正则表达式的子串
            </summary>
        </member>
        <member name="M:System.StringExtensions.Matches(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的所有匹配项的字符串集合
            </summary>
            <param name="value"> 要搜索匹配项的字符串 </param>
            <param name="pattern"> 要匹配的正则表达式模式 </param>
            <returns> 一个集合，包含有关匹配项的字符串值 </returns>
        </member>
        <member name="M:System.StringExtensions.MatchFirstNumber(System.String)">
            <summary>
            在指定的输入字符串中匹配第一个数字字符串
            </summary>
        </member>
        <member name="M:System.StringExtensions.MatchLastNumber(System.String)">
            <summary>
            在指定字符串中匹配最后一个数字字符串
            </summary>
        </member>
        <member name="M:System.StringExtensions.MatchNumbers(System.String)">
            <summary>
            在指定字符串中匹配所有数字字符串
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsMatchNumber(System.String)">
            <summary>
            检测指定字符串中是否包含数字
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsMatchNumber(System.String,System.Int32)">
            <summary>
            检测指定字符串是否全部为数字并且长度等于指定长度
            </summary>
        </member>
        <member name="M:System.StringExtensions.Substring2(System.String,System.String,System.String)">
            <summary>
            用正则表达式截取字符串
            </summary>
        </member>
        <member name="M:System.StringExtensions.Substring2(System.String,System.String,System.String,System.Boolean)">
            <summary>
            用正则表达式截取字符串
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsEmail(System.String)">
            <summary>
            是否电子邮件
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsIpAddress(System.String)">
            <summary>
            是否是IP地址
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsNumeric(System.String)">
            <summary>
            是否是整数
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsUnicode(System.String)">
            <summary>
            是否是Unicode字符串
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsUrl(System.String)">
            <summary>
            是否Url字符串
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsIdentityCardId(System.String)">
            <summary>
            是否身份证号，验证如下3种情况：
            1.身份证号码为15位数字；
            2.身份证号码为18位数字；
            3.身份证号码为17位数字+1个字母
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsMobileNumber(System.String,System.Boolean)">
            <summary>
            是否手机号码
            </summary>
            <param name="value"></param>
            <param name="isRestrict">是否按严格格式验证</param>
        </member>
        <member name="M:System.StringExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            判断指定的字符串不是 null、空。
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            判断指定的字符串不是 null、空或者仅由空白字符组成
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsMissing(System.String)">
            <summary>
            指示指定的字符串是 null、空或者仅由空白字符组成
            </summary>
        </member>
        <member name="M:System.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            为指定格式的字符串填充相应对象来生成字符串
            </summary>
            <param name="format">字符串格式，占位符以{n}表示</param>
            <param name="args">用于填充占位符的参数</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:System.StringExtensions.ReverseString(System.String)">
            <summary>
            将字符串反转
            </summary>
            <param name="value">要反转的字符串</param>
        </member>
        <member name="M:System.StringExtensions.ToSingular(System.String)">
            <summary>
            单词复数变成单数形式
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.ToPlural(System.String)">
            <summary>
            单词单数变成复数形式
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.Split(System.String,System.String,System.Boolean)">
            <summary>
            以指定字符串作为分隔符将指定字符串分隔成数组
            </summary>
            <param name="value">要分割的字符串</param>
            <param name="strSplit">字符串类型的分隔符</param>
            <param name="removeEmptyEntries">是否移除数据中元素为空字符串的项</param>
            <returns>分割后的数据</returns>
        </member>
        <member name="M:System.StringExtensions.TextLength(System.String)">
            <summary>
            支持汉字的字符串长度，汉字长度计为2
            </summary>
            <param name="value">参数字符串</param>
            <returns>当前字符串的长度，汉字长度为2</returns>
        </member>
        <member name="M:System.StringExtensions.AddUrlQuery(System.String,System.String[])">
            <summary>
            给URL添加查询参数
            </summary>
            <param name="url">URL字符串</param>
            <param name="queries">要添加的参数，形如："id=1,cid=2"</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.GetUrlQuery(System.String,System.String)">
            <summary>
            获取URL中指定参数的值，不存在返回空字符串
            </summary>
        </member>
        <member name="M:System.StringExtensions.AddHashFragment(System.String,System.String)">
            <summary>
            给URL添加 # 参数
            </summary>
            <param name="url">URL字符串</param>
            <param name="query">要添加的参数</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.ToBase64String(System.Byte[])">
            <summary>
            将<see cref="T:System.Byte"/>[]数组转换为Base64字符串
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为Base64字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="source">正常的字符串</param>
            <param name="encoding">编码</param>
            <returns>Base64字符串</returns>
        </member>
        <member name="M:System.StringExtensions.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
            将Base64字符串转换为正常字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="base64String">Base64字符串</param>
            <param name="encoding">编码</param>
            <returns>正常字符串</returns>
        </member>
        <member name="M:System.StringExtensions.ToUrlDecode(System.String)">
            <summary>
            将字符串进行UrlDecode解码
            </summary>
            <param name="source">待UrlDecode解码的字符串</param>
            <returns>UrlDecode解码后的字符串</returns>
        </member>
        <member name="M:System.StringExtensions.ToUrlEncode(System.String)">
            <summary>
            将字符串进行UrlEncode编码
            </summary>
            <param name="source">待UrlEncode编码的字符串</param>
            <returns>UrlEncode编码后的字符串</returns>
        </member>
        <member name="M:System.StringExtensions.ToHtmlDecode(System.String)">
            <summary>
            将字符串进行HtmlDecode解码
            </summary>
            <param name="source">待HtmlDecode解码的字符串</param>
            <returns>HtmlDecode解码后的字符串</returns>
        </member>
        <member name="M:System.StringExtensions.ToHtmlEncode(System.String)">
            <summary>
            将字符串进行HtmlEncode编码
            </summary>
            <param name="source">待HtmlEncode编码的字符串</param>
            <returns>HtmlEncode编码后的字符串</returns>
        </member>
        <member name="M:System.StringExtensions.ToHexString(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为十六进制字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:System.StringExtensions.FromHexString(System.String,System.Text.Encoding)">
            <summary>
            将十六进制字符串转换为常规字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToHexString(System.Byte[])">
            <summary>
            将byte[]编码为十六进制字符串
            </summary>
            <param name="bytes">byte[]数组</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:System.StringExtensions.ToHexBytes(System.String)">
            <summary>
            将十六进制字符串转换为byte[]
            </summary>
            <param name="hexString">十六进制字符串</param>
            <returns>byte[]数组</returns>
        </member>
        <member name="M:System.StringExtensions.ToUnicodeString(System.String)">
            <summary>
            将字符串进行Unicode编码，变成形如“\u7f16\u7801”的形式
            </summary>
            <param name="source">要进行编号的字符串</param>
        </member>
        <member name="M:System.StringExtensions.FromUnicodeString(System.String)">
            <summary>
            将形如“\u7f16\u7801”的Unicode字符串解码
            </summary>
        </member>
        <member name="M:System.StringExtensions.LowerFirstChar(System.String)">
            <summary>
            将驼峰字符串的第一个字符小写
            </summary>
        </member>
        <member name="M:System.StringExtensions.UpperFirstChar(System.String)">
            <summary>
            将小驼峰字符串的第一个字符大写
            </summary>
        </member>
        <member name="M:System.StringExtensions.LevenshteinDistance(System.String,System.String,System.Double@,System.Boolean)">
            <summary>
            计算当前字符串与指定字符串的编辑距离(相似度)
            </summary>
            <param name="source">源字符串</param>
            <param name="target">目标字符串</param>
            <param name="similarity">输出相似度</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>编辑距离</returns>
        </member>
        <member name="M:System.StringExtensions.GetSimilarityWith(System.String,System.String,System.Boolean)">
            <summary>
            计算两个字符串的相似度，应用公式：相似度=kq*q/(kq*q+kr*r+ks*s)(kq>0,kr>=0,ka>=0)
            其中，q是字符串1和字符串2中都存在的单词的总数，s是字符串1中存在，字符串2中不存在的单词总数，r是字符串2中存在，字符串1中不存在的单词总数. kq,kr和ka分别是q,r,s的权重，根据实际的计算情况，我们设kq=2，kr=ks=1.
            </summary>
            <param name="source">源字符串</param>
            <param name="target">目标字符串</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>字符串相似度</returns>
        </member>
        <member name="M:System.StringExtensions.NormalizePath(System.String)">
            <summary>
            标准化Path字符串,将 \\ 转换为 /
            </summary>
            <param name="path">Path字符串</param>
        </member>
        <member name="M:System.StringExtensions.PascalToKebabCase(System.String)">
            <summary>
            (Pascal) 命名法 的字符串 改为 短横线分隔式命名
            例如UserName => user-name
            </summary>
        </member>
        <member name="M:System.StringExtensions.AsJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            数组合并成字符串
            </summary>
            <param name="list"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.AsJoin``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            数组合并成字符串
            </summary>
            <param name="list"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.ToClearSqlInj(System.Object,System.Boolean)">
            <summary>
            清理SQL关键字
            </summary>
            <param name="str"></param>
            <param name="isStrictly">严格执行</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.AsSplit(System.String,System.String,System.Boolean)">
            <summary>
            分隔字符串为字符串数组
            </summary>
            <param name="str">字符串</param>
            <param name="splitString">分隔字符串</param>
            <param name="isRemoveEmpty">是否删除空字符串项目</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.AsSplit(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringSplitOptions)">
            <summary>
            检查字符串中是否存某个集合中的值.
            </summary>
            <param name="str">字符串</param>
            <param name="contains">字符串集合</param>
            <returns></returns>
        </member>
        <member name="T:System.Text.StringBuilderExtensions">
            <summary>
            StringBuilder 扩展方法类
            </summary>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.TrimStart(System.Text.StringBuilder)">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的空格
            </summary>
            <param name="stringBuilder"></param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的指定<seealso cref="T:System.Char"/>
            </summary>
            <param name="stringBuilder"></param>
            <param name="c">要去掉的<seealso cref="T:System.Char"/></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的指定字符数组
            </summary>
            <param name="stringBuilder"></param>
            <param name="chars">要去掉的字符数组</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头的指定的<seealso cref="T:System.String"/>
            </summary>
            <param name="stringBuilder"></param>
            <param name="str">要去掉的<seealso cref="T:System.String"/></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder结尾的空格
            </summary>
            <param name="stringBuilder">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符
            </summary>
            <param name="stringBuilder"></param>
            <param name="c">要去掉的字符</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符数组
            </summary>
            <param name="stringBuilder"></param>
            <param name="chars">要去除的字符数组</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符串
            </summary>
            <param name="stringBuilder"></param>
            <param name="str">要去除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.Trim(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder两端的空格
            </summary>
            <param name="stringBuilder">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.SubString(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            返回<see cref="T:System.Text.StringBuilder"/>从起始位置指定长度的字符串
            </summary>
            <param name="stringBuilder"></param>
            <param name="start">起始位置</param>
            <param name="length">长度</param>
            <returns>字符串</returns>
            <exception cref="T:System.IndexOutOfRangeException">超出字符串索引长度异常</exception>
        </member>
        <member name="M:Xamasoft.JsonClassGenerator.CodeWriters.CSharpCodeWriter.GetCSharpPascalCaseName(System.String)">
            <summary>Converts an identifier from JSON into a C#-safe PascalCase identifier.</summary>
        </member>
        <member name="M:Xamasoft.JsonClassGenerator.CodeWriters.CSharpCodeWriter.GetCSharpCamelCaseName(System.String)">
            <summary>Converts a camelCase identifier from JSON into a C#-safe camelCase identifier.</summary>
        </member>
        <member name="P:Xamasoft.JsonClassGenerator.FieldInfo.MemberName">
            <summary>Pascal-cased.</summary>
        </member>
        <member name="P:Xamasoft.JsonClassGenerator.FieldInfo.JsonMemberName">
            <summary>Normally camelCased.</summary>
        </member>
        <member name="P:Xamasoft.JsonClassGenerator.IJsonClassGeneratorConfig.UseJsonAttributes">
            <summary>Use the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> on generated C# class properties (as opposed to not rendering any attributes, or using <see cref="P:Xamasoft.JsonClassGenerator.IJsonClassGeneratorConfig.UseJsonPropertyName"/>).</summary>
        </member>
        <member name="P:Xamasoft.JsonClassGenerator.IJsonClassGeneratorConfig.UseJsonPropertyName">
            <summary>Use the <c>[JsonPropertyName]</c> attribute on generated C# class properties (as opposed to not rendering any attributes, or using <see cref="P:Xamasoft.JsonClassGenerator.IJsonClassGeneratorConfig.UseJsonAttributes"/>).</summary>
        </member>
        <member name="M:Xamasoft.JsonClassGenerator.JsonClassGeneratorConfigExtensions.GetCSharpJsonAttributeCode(Xamasoft.JsonClassGenerator.IJsonClassGeneratorConfig,Xamasoft.JsonClassGenerator.FieldInfo)">
            <summary>Never returns <see langword="null"/>. Returns either &quot;<c>[JsonPropertyName(&quot;<paramref name="field"/>.<see cref="P:Xamasoft.JsonClassGenerator.FieldInfo.JsonMemberName"/>&quot;)]</c>&quot; or &quot;<c>[JsonPropertyName(&quot;<paramref name="field"/>.<see cref="P:Xamasoft.JsonClassGenerator.FieldInfo.JsonMemberName"/>&quot;)]</c>&quot; - or an empty string depending on <paramref name="config"/> and <see cref="P:Xamasoft.JsonClassGenerator.FieldInfo.ContainsSpecialChars"/>.</summary>
            <param name="config">Required. Cannot be <see langword="null"/>.</param>
            <param name="field">Required. Cannot be <see langword="null"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Xamasoft.JsonClassGenerator.JsonClassGenerator.HandleDuplicateClasses(System.Collections.Generic.IList{Xamasoft.JsonClassGenerator.JsonType})">
            <summary>
            Checks if there are any duplicate classes in the input, and merges its corresponding properties (TEST CASE 7)
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
    </members>
</doc>
